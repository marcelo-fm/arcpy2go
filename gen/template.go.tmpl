// Code generated by arcpy2go; DO NOT EDIT.
package {{.PackageName}}

import (
  "fmt"
  "strings"
)

{{$prefix := .FunctionName}}
// {{.FunctionComment}}
type {{.FunctionName}} struct {
  {{range .Parameters -}}
  // {{.Comment}}
  {{.Name | camelCase}} {{if not .Required}}*{{end}}{{if len .Enums}}{{$prefix}}{{.Name | camelCase}}{{else}}string{{end}}
  {{end}}
}

func (p {{.FunctionName}}) Name() string {
    return "{{.Command}}"
}

func (p {{.FunctionName}}) Command() string {
    return fmt.Sprintf("%s(%s)", p.Name(), p.Args())
}

func (p {{.FunctionName}}) Args() string {
  var params []string
  {{range .Parameters -}}
  {{- if not .Required}}if p.{{.Name | camelCase}} != nil { {{end -}}
  params = append(params, fmt.Sprintf("{{.Name}}='%s'", {{if not .Required}}*{{end}}p.{{ .Name | camelCase}}))
  {{- if not .Required}} } {{end}}
  {{end -}}
  return strings.Join(params, ",")
}

{{- range .Parameters}}
{{- if len .Enums}}
type {{$prefix}}{{.Name | camelCase}} string
{{$paramName := .Name}}
const (
{{range .Enums -}}
// {{.Comment}}
{{$prefix}}{{$paramName | camelCase}}{{.Name | camelCase}} {{$prefix}}{{$paramName | camelCase}} = "{{.Name}}"
{{end -}}
)
{{- end -}}
{{- end -}}

