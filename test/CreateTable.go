// Code generated by arcpy2go; DO NOT EDIT.
package arcpy

import (
  "fmt"
  "strings"
)

// Create Table (Data Management)
type CreateTable struct {
  // The workspace where the output table will be created.
  OutPath string
  // The name of the table that will be created.
  OutName string
  // One or more datasets from which the attribute schema will be used to define the output table. Fields in the template datasets will be added to the output table.
  Template *string
  // The configuration keyword that determines the storage parameters of the table in an enterprise geodatabase.
  ConfigKeyword *string
  // The alternate name of the  output table that will be created.
  OutAlias *string
  // Specifies whether the output Object ID field will be 32 bit or 64 bit.SAME_AS_TEMPLATE—The output Object ID field type (32 bit or 64 bit) will be the same as the Object ID field of the first template dataset. This is the default.64_BIT—The  output Object ID field will be  64 bit. 32_BIT—The output Object ID field will be 32 bit.
  OidType string
  
}

func (p *CreateTable) Name() string {
    return "arcpy.management.CreateTable"
}

func (p *CreateTable) Command() string {
    return fmt.Sprintf("%s(%s)", p.Name(), p.Args())
}

func (p *CreateTable) Args() string {
  var params []string
  params = append(params, fmt.Sprintf("out_path='%s'",p.OutPath))
  params = append(params, fmt.Sprintf("out_name='%s'",p.OutName))
  if p.Template != nil { params = append(params, fmt.Sprintf("template='%s'",*p.Template)) } 
  if p.ConfigKeyword != nil { params = append(params, fmt.Sprintf("config_keyword='%s'",*p.ConfigKeyword)) } 
  if p.OutAlias != nil { params = append(params, fmt.Sprintf("out_alias='%s'",*p.OutAlias)) } 
  params = append(params, fmt.Sprintf("oid_type='%s'",p.OidType))
  return strings.Join(params, ",")
}
